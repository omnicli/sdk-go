name: Build

on:
  push:
    branches:
      - main

    tags:
      - v*

  pull_request:

  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CI: 'true'

jobs:
  prepare-env:
    name: Prepare environment
    runs-on: "ubuntu-latest"

    outputs:
      requires_tests: ${{ env.REQUIRES_TESTS }}
      publish_release: ${{ env.PUBLISH_RELEASE }}
      release_version: ${{ env.RELEASE_VERSION }}

    steps:
      - name: Check if tests should happen no matter the files
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          REQUIRES_TESTS=false
          if [[ "$GITHUB_EVENT_NAME" == "schedule" ]] || \
             [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == "refs/heads/main" ]] || \
             [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == "refs/tags/v"* ]]; then
            REQUIRES_TESTS=true
          fi
          echo "REQUIRES_TESTS=${REQUIRES_TESTS}" | tee -a "$GITHUB_ENV"

      - name: Checkout current commit
        uses: "actions/checkout@v5"
        if: ${{ env.REQUIRES_TESTS != 'true' }}

      - name: Get the changed files
        id: changed-files
        if: ${{ env.REQUIRES_TESTS != 'true' }}
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha || 'HEAD^' }}
          MODIFIED_FILES_SOURCE_CODE: |
            go.mod
            go.sum
            *.go
            cmd/**/*.go
            internal/**/*.go
            .github/workflows/build.yaml
        run: |
          .github/scripts/get-changed-files.sh

      - name: Identify if testing is required
        if: ${{ env.REQUIRES_TESTS != 'true' }}
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.source_code_any_changed }}
          DELETED_FILES: ${{ steps.changed-files.outputs.source_code_any_deleted }}
          MODIFIED_FILES: ${{ steps.changed-files.outputs.source_code_any_modified }}
        run: |
          REQUIRES_TESTS=false
          if [[ "$CHANGED_FILES" == "true" ]] || \
             [[ "$DELETED_FILES" == "true" ]] || \
             [[ "$MODIFIED_FILES" == "true" ]]; then
            REQUIRES_TESTS=true
          fi
          echo "REQUIRES_TESTS=${REQUIRES_TESTS}" | tee -a "$GITHUB_ENV"

      - name: Check if pushing a tag
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          PUBLISH_RELEASE=false
          if [[ -n "$GITHUB_REF" ]] && [[ "$GITHUB_REF" == "refs/tags/v"* ]]; then
            PUBLISH_RELEASE=true
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" | tee -a "$GITHUB_ENV"
          fi
          echo "PUBLISH_RELEASE=${PUBLISH_RELEASE}" | tee -a "$GITHUB_ENV"


  lint:
    name: Checking lint
    runs-on: ubuntu-latest

    needs:
      - prepare-env

    if: needs.prepare-env.outputs.requires_tests == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup go
        uses: actions/setup-go@v6
        with:
          go-version-file: ./go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v7
        with:
          version: v1.60.1


  tests:
    name: Tests
    runs-on: "ubuntu-latest"

    needs:
      - prepare-env

    if: needs.prepare-env.outputs.requires_tests == 'true'

    steps:
      - name: Checkout current commit
        uses: actions/checkout@v5

      - name: Setup go
        uses: actions/setup-go@v6
        with:
          go-version-file: ./go.mod

      - name: Run unit & integration tests
        id: tests
        run: |
          go test ./...


  results:
    name: Aggregate test results
    runs-on: ubuntu-latest

    needs:
      - lint
      - tests

    if: always()

    steps:
      - name: Fail if lint failed
        if: needs.lint.result == 'failure'
        run: exit 1

      - name: Fail if tests failed
        if: needs.tests.result == 'failure'
        run: exit 1


  push-release:
    name: Release version
    runs-on: ubuntu-latest

    needs:
      - prepare-env
      - results

    if: needs.prepare-env.outputs.publish_release == 'true' && needs.results.result != 'failure'

    permissions:
      contents: write

    steps:
      - name: Create application token
        uses: actions/create-github-app-token@v2
        id: app-token
        env:
          APP_ID: ${{ secrets.OMNICLI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.OMNICLI_PRIVATE_KEY }}
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      - name: Checkout current commit
        uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Release version
        uses: ncipollo/release-action@v1
        with:
          token: ${{ steps.app-token.outputs.token }}
          tag: v${{ needs.prepare-env.outputs.release_version }}
          name: v${{ needs.prepare-env.outputs.release_version }}
          generateReleaseNotes: true
          commit: ${{ github.sha }}
          makeLatest: true
          skipIfReleaseExists: true
          # This should allow to fail the release creation
          # if the release already exists and is not a draft
          # or pre-release (none of our releases are)
          allowUpdates: true
          updateOnlyUnreleased: true


  publish-binaries:
    name: Publish binaries
    runs-on: ubuntu-latest
    needs:
      - push-release

    permissions:
      contents: write

    steps:
      - name: Create application token
        uses: actions/create-github-app-token@v2
        id: app-token
        env:
          APP_ID: ${{ secrets.OMNICLI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.OMNICLI_PRIVATE_KEY }}
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: ./go.mod

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
